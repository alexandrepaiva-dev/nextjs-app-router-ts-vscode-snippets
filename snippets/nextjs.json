{
  "Component Client": {
    "prefix": "nxtComponentClient",
    "body": [
      "\"use client\";",
      "",
      "import type { JSX } from \"react\";",
      "import { useEffect, useState } from \"react\";",
      "",
      "type Props = {",
      "  children: React.ReactNode;",
      "};",
      "",
      "export default function MyComponent({ children }: Props): JSX.Element {",
      "  const [count, setCount] = useState(0);",
      "",
      "  useEffect(() => {",
      "    console.log(\"Component mounted\");",
      "",
      "    return () => {",
      "      console.log(\"Component unmounted\");",
      "    };",
      "  }, []);",
      "",
      "  return (",
      "    <section>",
      "      <h2>This is a Client Component</h2>",
      "      <p>Button clicked {count} times</p>",
      "      <button onClick={() => setCount(count + 1)}>Click me</button>",
      "      {children}",
      "    </section>",
      "  );",
      "}"
    ],
    "description": "Next.js client component (TypeScript)"
  },
  "Component Server": {
    "prefix": "nxtComponentServer",
    "body": [
      "import type { JSX } from \"react\";",
      "",
      "type Props = {",
      "  children: React.ReactNode;",
      "};",
      "",
      "export default function MyComponent({ children }: Props): JSX.Element {",
      "  return (",
      "    <section>",
      "      <h2>This is a Server Component</h2>",
      "      {children}",
      "    </section>",
      "  );",
      "}"
    ],
    "description": "Next.js server component (TypeScript)"
  },
  "Error": {
    "prefix": "nxtError",
    "body": [
      "\"use client\";",
      "",
      "import type { JSX } from \"react\";",
      "import { useEffect } from \"react\";",
      "",
      "export default function Error({",
      "  error,",
      "  reset,",
      "}: {",
      "  error: Error;",
      "  reset: () => void;",
      "}): JSX.Element {",
      "  useEffect(() => {",
      "    console.error(\"App Router error captured:\", error);",
      "  }, [error]);",
      "",
      "  return (",
      "    <div>",
      "      <h2>Something went wrong ðŸ˜¬</h2>",
      "      <button onClick={reset}>Try again</button>",
      "    </div>",
      "  );",
      "}"
    ],
    "description": "Next.js App Router error.tsx (client component + reset)"
  },
  "Layout": {
    "prefix": "nxtLayout",
    "body": [
      "import type { Metadata } from \"next\";",
      "import type { JSX } from \"react\";",
      "",
      "import \"./globals.css\";",
      "",
      "export const metadata: Metadata = {",
      "  title: \"My App\",",
      "  description: \"Next.js App Router Example\",",
      "};",
      "",
      "export default function RootLayout({",
      "  children,",
      "}: {",
      "  children: React.ReactNode;",
      "}): JSX.Element {",
      "  return (",
      "    <html lang=\"en\">",
      "      <body>{children}</body>",
      "    </html>",
      "  );",
      "}"
    ],
    "description": "Next.js App Router RootLayout (TypeScript)"
  },
  "Loading": {
    "prefix": "nxtLoading",
    "body": [
      "import type { JSX } from \"react\";",
      "",
      "export default function Loading(): JSX.Element {",
      "  return <p>Loading page...</p>;",
      "}"
    ],
    "description": "Next.js App Router loading.tsx (TypeScript)"
  },
  "Not Found": {
    "prefix": "nxtNotFound",
    "body": [
      "import type { JSX } from \"react\";",
      "import type { Metadata } from \"next\";",
      "",
      "export const metadata: Metadata = {",
      "  title: \"Page Not Found - 404\",",
      "  description: \"This page doesn&apos;t exist or may have been moved.\",",
      "};",
      "",
      "export default function NotFound(): JSX.Element {",
      "  return (",
      "    <div>",
      "      <h1>404 - Page Not Found</h1>",
      "      <p>Sorry, we couldn&apos;t find the page you were looking for.</p>",
      "    </div>",
      "  );",
      "}"
    ],
    "description": "Next.js App Router not-found.tsx (with metadata + TypeScript)"
  },
  "Page": {
    "prefix": "nxtPage",
    "body": [
      "import type { JSX } from \"react\";",
      "import type { Metadata } from \"next\";",
      "",
      "export const metadata: Metadata = {",
      "  title: \"Page\",",
      "  description: \"Welcome to the main page!\",",
      "};",
      "",
      "export default function Page(): JSX.Element {",
      "  return (",
      "    <main>",
      "      <h1>Page</h1>",
      "      <p>This is a page using TypeScript and static metadata.</p>",
      "    </main>",
      "  );",
      "}"
    ],
    "description": "Next.js App Router Page with static metadata (TypeScript)"
  },
  "Robots": {
    "prefix": "nxtRobots",
    "body": [
      "import { type MetadataRoute } from \"next\";",
      "",
      "export default function robots(): MetadataRoute.Robots {",
      "  return {",
      "    rules: [",
      "      {",
      "        userAgent: \"*\",",
      "        allow: \"/\",",
      "      },",
      "    ],",
      "    sitemap: \"https://example.com/sitemap.xml\",",
      "    host: \"https://example.com\",",
      "  };",
      "}"
    ],
    "description": "Next.js App Router robots.ts (TypeScript, MetadataRoute.Robots)"
  },
  "Route": {
    "prefix": "nxtRouteHandlers",
    "body": [
      "import type { NextRequest } from \"next/server\";",
      "import { NextResponse } from \"next/server\";",
      "",
      "export async function GET(_req: NextRequest): Promise<NextResponse> {",
      "  const method: string = _req.method;",
      "  return NextResponse.json({ method, message: \"GET request received\" });",
      "}",
      "",
      "export async function POST(req: NextRequest): Promise<NextResponse> {",
      "  const body = await req.json();",
      "  return NextResponse.json({ method: \"POST\", data: body });",
      "}",
      "",
      "export async function PUT(req: NextRequest): Promise<NextResponse> {",
      "  const body = await req.json();",
      "  return NextResponse.json({ method: \"PUT\", data: body });",
      "}",
      "",
      "export async function PATCH(req: NextRequest): Promise<NextResponse> {",
      "  const body = await req.json();",
      "  return NextResponse.json({ method: \"PATCH\", data: body });",
      "}",
      "",
      "export async function DELETE(_req: NextRequest): Promise<NextResponse> {",
      "  const method: string = _req.method;",
      "  return NextResponse.json({",
      "    method,",
      "    message: \"Resource deleted (simulated)\",",
      "  });",
      "}",
      "",
      "export async function HEAD(): Promise<NextResponse> {",
      "  return new NextResponse(null, { status: 200 });",
      "}",
      "",
      "export async function OPTIONS(): Promise<NextResponse> {",
      "  return new NextResponse(null, {",
      "    status: 204,",
      "    headers: {",
      "      Allow: \"GET, POST, PUT, PATCH, DELETE, HEAD, OPTIONS\",",
      "    },",
      "  });",
      "}"
    ],
    "description": "Next.js Route Handlers with all HTTP methods (App Router + TypeScript)"
  },
  "Sitemap": {
    "prefix": "nxtSitemap",
    "body": [
      "import { type MetadataRoute } from \"next\";",
      "",
      "export default function sitemap(): MetadataRoute.Sitemap {",
      "  return [",
      "    {",
      "      url: \"https://example.com/\",",
      "      lastModified: new Date(),",
      "    },",
      "    {",
      "      url: \"https://example.com/about\",",
      "      lastModified: new Date(\"2024-01-01\"),",
      "    },",
      "  ];",
      "}"
    ],
    "description": "Next.js App Router sitemap.ts (TypeScript, MetadataRoute.Sitemap)"
  },
  "Template": {
    "prefix": "nxtTemplate",
    "body": [
      "import type { JSX } from \"react\";",
      "",
      "export default function Template({",
      "  children,",
      "}: {",
      "  children: React.ReactNode;",
      "}): JSX.Element {",
      "  return <>{children}</>;",
      "}"
    ],
    "description": "Next.js App Router template.tsx (TypeScript)"
  }
}